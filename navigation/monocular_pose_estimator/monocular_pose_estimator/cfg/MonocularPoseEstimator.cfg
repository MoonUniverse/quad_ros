#! /usr/bin/env python

# Monocular Pose Estimator dynamic parameter configuration file

PACKAGE='monocular_pose_estimator'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#       Name             Type      Level Description             Default Min   Max
gen.add("threshold_value", int_t,   0,    "The thresholding value for the images", 180,     0,     255)
gen.add("gaussian_sigma", double_t,   0,    "The standard deviation of the Gaussian blurring filter", 0.6, 0, 6)
gen.add("min_blob_area", double_t,   0,    "Smallest blob area found", 10,     0,     100)
gen.add("max_blob_area", double_t,   0,    "Largest blob area found", 200,     0,     1000)
gen.add("max_width_height_distortion", double_t, 0, "Max height width distortion of blob", 0.5, 0, 1)
gen.add("max_circular_distortion", double_t, 0, "Max deviation from roundness", 0.5, 0, 1)
gen.add("back_projection_pixel_tolerance", double_t, 0, "The pixel tolerance for the backprojection of points", 5, 0, 10)
gen.add("nearest_neighbour_pixel_tolerance", double_t, 0, "The pixel tolerance for finding point correspondences", 5, 0, 10)
gen.add("certainty_threshold", double_t, 0, "The proportion of back projected points that are correct for a set of image marker correspondences to be considered valid", 0.75, 0, 1)
gen.add("valid_correspondence_threshold", double_t, 0, "The proportion of correspondences that have to be correct based on the back projection of points for the entire correspondence list to be considered correct", 0.7, 0, 1)
gen.add("roi_border_thickness", int_t, 0, "The thickness of the boarder around the region of interest in pixels", 10, 0, 200)

exit(gen.generate(PACKAGE, "monocular_pose_estimator", "MonocularPoseEstimator"))
